{"version":3,"sources":["components/Question.js","components/QuestionList.js","components/Exam.js","components/ExamLink.js","components/ExamList.js","components/Index.js","App.js","reportWebVitals.js","index.js"],"names":["FiberManualRecordOutlinedIcon","withStyles","root","height","width","MuiFiberManualRecordOutlinedIcon","FiberManualRecordIcon","MuiFiberManualRecordIcon","Question","props","shuffle","array","i","length","j","Math","floor","random","temp","answer_init","data","options","forEach","x","toString","state","wrong","correct","checked","answer","solutionButtonText","tag","type","this","setState","console","log","ok","Object","keys","key","prev","classes","green","red","Type","postData","exam","name","question","_id","fetch","method","headers","credentials","crossDomain","body","JSON","stringify","then","res","json","ans","loaded","text","e","opt","chex","className","yellow","hide","preventDefault","undefined","image","src","alt","srcset","Card","CardContent","Typography","title","color","gutterBottom","id","getResultIcons","getExamName","tags","map","index","variant","component","questionImage","option","Divider","FormControlLabel","control","Checkbox","icon","checkedIcon","onChange","handleChange","label","solution","CardActions","style","flex","justifyContent","getSolutonClass","Button","onClick","toggleSolution","value","target","updateTag","Component","theme","minWidth","margin","overflowX","boxShadow","paddingBottom","fontSize","bullet","display","transform","marginBottom","largeIcon","QuestionList","questions","getData","response","Alert","elevation","Exam","cnt","loading","time","handle","refs","handled","dialogOpen","examType","xmRnd","stateUpdate","Promise","resolve","match","params","a","setStateSynchronous","endTime","Date","getTime","xmEnd","xm_end","push","React","createRef","timer","setInterval","clearInterval","c","w","result","current","now","h","m","f","snackbar","handleOpen","Backdrop","backdrop","open","CircularProgress","Dialog","keepMounted","onClose","handleClose","fullWidth","maxWidth","DialogTitle","DialogActions","AppBar","position","Toolbar","getSubmitBtn","ref","Snackbar","autoHideDuration","handleSnackbarClose","severity","backgroundColor","marginTop","textAlign","zIndex","drawer","ExamLink","duration","start","toLocaleString","end","window","location","getStartingTime","getEndingTime","take","ExamList","exams_all","exams","search","ex","includes","main","handleSearch","Grid","container","spacing","grid","gridTemplateColumns","padding","Index","App","createMuiTheme","palette","mode","primary","purple","secondary","grey","themeX","800","900","responsiveFontSizes","CssBaseline","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fc843383.chunk.js","sourcesContent":["import React, { Component, useImperativeHandle } from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Favorite from '@material-ui/icons/Favorite';\r\nimport FavoriteBorder from '@material-ui/icons/FavoriteBorder';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport PriorityHighIcon from '@material-ui/icons/PriorityHigh';\r\nimport MuiAccordion from '@material-ui/core/Accordion';\r\nimport MuiAccordionSummary from '@material-ui/core/AccordionSummary';\r\nimport MuiAccordionDetails from '@material-ui/core/AccordionDetails';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport MuiFiberManualRecordIcon from '@material-ui/icons/FiberManualRecord';\r\nimport MuiFiberManualRecordOutlinedIcon from '@material-ui/icons/FiberManualRecordOutlined';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\nimport Switch from '@material-ui/core/Switch';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport SyncIcon from '@material-ui/icons/Sync';\r\n\r\nconst useStyles = theme => ({\r\n    root: {\r\n        minWidth: 275,\r\n        margin: 15,\r\n        overflowX: 'scroll',\r\n        '&:hover': {\r\n            boxShadow: '0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)',\r\n        },\r\n        paddingBottom: '10px',\r\n        fontSize: '10px',\r\n    },\r\n    bullet: {\r\n        display: 'inline-block',\r\n        margin: '0 2px',\r\n        transform: 'scale(0.8)',\r\n    },\r\n    title: {\r\n        fontSize: 14,\r\n        marginBottom: '25px',\r\n    },\r\n    question: {\r\n        marginBottom: '25px',\r\n    },\r\n    hide: {\r\n        display: 'none',\r\n    },\r\n    red: {\r\n        color: 'red',\r\n    },\r\n    green: {\r\n        color: '#00ff00',\r\n    },\r\n    yellow: {\r\n        color: 'black'\r\n    },\r\n    largeIcon: {\r\n        width: 60,\r\n        height: 60,\r\n    },\r\n});\r\nconst FiberManualRecordOutlinedIcon = withStyles({\r\n    root: {\r\n        height: '50px',\r\n        width: '50px',\r\n    },\r\n})(MuiFiberManualRecordOutlinedIcon);\r\n\r\nconst FiberManualRecordIcon = withStyles({\r\n    root: {\r\n        height: '50px',\r\n        width: '50px',\r\n    },\r\n})(MuiFiberManualRecordIcon);\r\n\r\n\r\nclass Question extends Component {   \r\n    constructor(props) {\r\n        super(props);\r\n        //this.shuffle(this.props.data.options);\r\n        var answer_init={};\r\n        this.props.data.options.forEach(x=> {\r\n            answer_init[x.toString()]=false;\r\n        });\r\n        this.state = {\r\n            wrong: '',\r\n            correct: '',\r\n            checked: -1,\r\n            answer: answer_init,\r\n            solutionButtonText: 'View Solution',\r\n            tag: this.props.data.tag,\r\n            type: this.props.data.type,\r\n        };\r\n    }\r\n\r\n    shuffle = (array) => {\r\n        for (var i = array.length - 1; i > 0; i--) {\r\n            var j = Math.floor(Math.random() * (i + 1));\r\n            var temp = array[i];\r\n            array[i] = array[j];\r\n            array[j] = temp;\r\n        }\r\n    };\r\n    toggleSolution() {\r\n        if(this.state.solutionButtonText==='View Solution') {\r\n            this.setState({solutionButtonText: 'Hide Solution'});\r\n        }\r\n        else {\r\n            this.setState({solutionButtonText: 'View Solution'});\r\n        }\r\n    }\r\n    chex() {\r\n        console.log('checking');\r\n        //if(this.props.Type === 'live') return;\r\n      //  if(this.state.checked!==-1) return;\r\n        var ok=0;\r\n        if(this.state.answer[this.props.data.answer.toString()]===true) ok=1;\r\n        Object.keys(this.state.answer).forEach(key=>{\r\n            console.log(key,this.state.answer[key]);\r\n            if(this.state.answer[key]===true) {\r\n                if(key!==this.props.data.answer.toString()) ok=2;\r\n            }\r\n        });\r\n\r\n        this.setState(prev => ({\r\n            answer: {\r\n                ...prev.answer,\r\n                [this.props.data.answer.toString()]: true,\r\n            }\r\n        }));\r\n        this.setState({correct: this.props.classes.green});\r\n        this.setState({wrong: this.props.classes.red});\r\n        this.setState({checked: ok});\r\n        return ok;\r\n    }\r\n    componentDidMount() {\r\n        // if live exam, retrive previously answered questions.\r\n        \r\n      \r\n\r\n\r\n\r\n\r\n        if(this.props.Type==='live') {\r\n            const postData = {\r\n                exam: this.props.name,\r\n                question: this.props.data._id,\r\n            };\r\n            fetch(\"https://questrom.herokuapp.com/submissions/\", {\r\n                method: 'post',\r\n                headers: {\r\n                    'Accept': 'application/json, text/plain, */*',\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                credentials: 'include',\r\n                crossDomain: true,\r\n                body: JSON.stringify(postData)\r\n            })\r\n            .then(res=>res.json())\r\n            .then(data=>{\r\n                if(data) {\r\n                    //console.log(data);\r\n                    this.setState(prev => ({\r\n                        answer: {\r\n                            ...prev.answer,\r\n                            [data.ans]: true,\r\n                        }\r\n                    }),()=> {\r\n                        this.setState({checked: 3});\r\n                        this.props.loaded(this.props.data.text);\r\n                    });\r\n                }\r\n                else this.props.loaded(this.props.data.text);\r\n            });\r\n        }\r\n        else this.props.loaded(this.props.data.text);\r\n    }\r\n    handleChange(e,opt) {\r\n        // if already checked return\r\n        if(this.state.checked!==-1) return;\r\n        \r\n        // in questions, immediately check!\r\n        if(this.props.Type === 'question') {\r\n            this.setState(prev => ({\r\n                answer: {\r\n                    ...prev.answer,\r\n                    [opt]: ! this.state.answer[opt],\r\n                }\r\n            }),()=>{\r\n                // marked, now chex :D\r\n                console.log('done!');\r\n                this.chex();\r\n            });\r\n        }\r\n        // live, submit to server\r\n        else if(this.props.Type==='live') {\r\n\r\n\r\n            // make sure cannot mark twice\r\n            this.state.checked = 4;\r\n\r\n            // mark immediately....\r\n            this.setState(prev => ({\r\n                answer: {\r\n                    ...prev.answer,\r\n                    [opt]: ! this.state.answer[opt],\r\n                }\r\n            }),()=>{\r\n               \r\n            });\r\n\r\n            const postData = {\r\n                exam: this.props.name,\r\n                question: this.props.data._id,\r\n                ans: opt\r\n            };\r\n            var self = this;\r\n            fetch(\"https://questrom.herokuapp.com/submissions/\", {\r\n                method: 'put',\r\n                headers: {\r\n                    'Accept': 'application/json, text/plain, */*',\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                credentials: 'include',\r\n                crossDomain: true,\r\n                body: JSON.stringify(postData)\r\n            })\r\n            .then(res=>res.json()) // ensure valid json response\r\n            .then(data=>{\r\n                \r\n                if(data) { \r\n                     // everything ok, now set state to 3 so that we can not change answer\r\n                    this.setState({checked: 3});\r\n                }\r\n                else {\r\n                    // no internet maybe? UNMARK\r\n                    this.setState(prev => ({\r\n                        answer: {\r\n                            ...prev.answer,\r\n                            [opt]: ! this.state.answer[opt],\r\n                        }\r\n                    }),()=>{\r\n                        this.setState({checked: -1});\r\n                    });\r\n                }\r\n            });\r\n            \r\n        }\r\n        else if(this.props.Type==='practice') {\r\n            this.setState(prev => ({\r\n                answer: {\r\n                    ...prev.answer,\r\n                    [opt]: ! this.state.answer[opt],\r\n                }\r\n            }),()=>{\r\n                // marked, but don't check now\r\n            });\r\n        } \r\n    }\r\n    getResultIcons() {\r\n        if(this.state.checked===-1) return '';\r\n        else if(this.state.checked===1) return <CheckIcon className={this.props.classes.green}/>\r\n        else if(this.state.checked===2) return <ClearIcon className={this.props.classes.red}/>\r\n        else if(this.state.checked===0) return <PriorityHighIcon className={this.props.classes.yellow}/>\r\n        else if(this.state.checked===3) return <SyncIcon className={this.props.classes.yellow}/>\r\n    }\r\n    getSolutonClass() {\r\n        if(this.props.Type==='question') return '';\r\n        else if(this.props.Type==='practice' && this.state.checked!==-1) return '';\r\n        else return this.props.classes.hide;\r\n    }\r\n    addToDeck() {\r\n        \r\n    }\r\n    getExamName() {\r\n        if(this.props.Type==='question') return this.props.data.exam;\r\n    }\r\n    updateTag(e) {\r\n        e.preventDefault();\r\n        var postData = this.props.data;\r\n        postData['tag'] = this.state.tag;\r\n        postData['type'] = this.state.type;\r\n        console.log(postData);\r\n        fetch(\"https://questrom.herokuapp.com/questions/\" + this.props.data._id, {\r\n                method: 'put',\r\n                headers: {\r\n                    'Accept': 'application/json, text/plain, */*',\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                credentials: 'include',\r\n                crossDomain: true,\r\n                body: JSON.stringify(postData)\r\n        })\r\n        .then(res=>res.json()) // ensure valid json response\r\n        .then(data=>{\r\n            console.log(data);\r\n        });\r\n    }\r\n    questionImage() {\r\n        if(this.props.data.image!==undefined)\r\n        return <img src={this.props.data.image} alt=\"\" srcset=\"\"/>\r\n        return \"\";\r\n    }\r\n    render() {\r\n        return ( \r\n            <Card className={this.props.classes.root}>\r\n                <CardContent>\r\n                    <Typography className={this.props.classes.title} color=\"textSecondary\" gutterBottom>\r\n                    {this.props.id}\r\n                    {this.getResultIcons()}\r\n                    {this.getExamName()}\r\n                    {this.props.Type==='question' && this.props.data.tags.map((tag,index) => {\r\n                            return (\r\n                                <span key={index}>\r\n                                    {tag}\r\n                                </span>\r\n                            );\r\n                    })}\r\n                    \r\n                    </Typography>\r\n                    <Typography variant=\"h6\" component=\"h2\" className={this.props.classes.question}>\r\n                    \r\n                    {this.questionImage()}\r\n                    {this.props.data.text}\r\n\r\n                    </Typography>\r\n\r\n                    {this.props.data.options.map((option,index) => {\r\n                        return (\r\n                            <div>\r\n                                <Divider/>\r\n                                <b>{index}{\" \"}</b>\r\n                                <FormControlLabel \r\n                                control={<Checkbox checked={this.state.answer[option.toString()]} icon={\r\n                                <FiberManualRecordOutlinedIcon/>} checkedIcon={<FiberManualRecordIcon className={\r\n                                    option.toString()===this.props.data.answer.toString()?\r\n                                    this.state.correct:this.state.wrong\r\n                                }/>\r\n                                } onChange={(e) => { this.handleChange(e,option.toString()) }}/>}\r\n                                label={\r\n                                        <div>\r\n                                            {option[0]}\r\n                                            {option[1]!==''?<img src={option[1]} alt='alt ?'></img>:''}\r\n                                        </div>\r\n                                } key={index}/>\r\n                            </div>\r\n                        );\r\n                    })}\r\n                <div className={this.state.solutionButtonText==='View Solution'?this.props.classes.hide:this.props.classes.solution}>\r\n                    {this.props.data.solution[0]}\r\n                    {this.props.data.solution[1]!==''?<img src={this.props.data.solution[1]} alt='hudae'></img>:''}\r\n                </div>\r\n                </CardContent>                 \r\n                <CardActions style={{flex:1, justifyContent: 'center'}} className={this.getSolutonClass()}>\r\n                    <Button variant=\"outlined\" onClick={()=>this.toggleSolution()}>{this.state.solutionButtonText}</Button>\r\n                    <Button variant=\"outlined\" onClick={()=>this.chex()}>Add to deck</Button>\r\n                </CardActions>\r\n                <form>\r\n                    CHAPTER: <input type=\"text\" name=\"\" id=\"\" value={this.state.tag} onChange={(e) => {\r\n                        this.setState({tag: e.target.value})}\r\n                    }/>\r\n                    TYPE: <input type=\"text\" value={this.state.type} onChange={(e) => {\r\n                        this.setState({type: e.target.value})\r\n                    }}/>\r\n                    <input type=\"button\" value=\"Update\" onClick={(e) => this.updateTag(e)}/>\r\n                    \r\n                </form>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\nexport default withStyles(useStyles)(Question)\r\n\r\n\r\n                \r\n               ","import React, { Component } from 'react';\r\nimport Question from './Question';\r\nimport { Grid } from '@material-ui/core';\r\n\r\nclass QuestionList extends Component {\r\n  state = {\r\n    questions: [],\r\n  };\r\n  componentDidMount() {\r\n    this.getData();\r\n  }\r\n  getData=()=>{\r\n    fetch(\"https://questrom.herokuapp.com/questions\",{\r\n      credentials: 'include',\r\n      crossDomain: true\r\n    })\r\n    .then(response=>response.json())\r\n    .then(data=>{\r\n      this.setState({questions: data});\r\n      console.log(data);\r\n    });\r\n  }\r\n  callback(state) {\r\n    console.log(state);  \r\n  }\r\n  render() {\r\n    return (\r\n        <div id='content' style={{display: 'flex'}}>\r\n            {this.state.questions.length>0 && this.state.questions.map((question,index) => {\r\n                return <Question data={question} key={question._id} type='question'></Question>\r\n            })}\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default QuestionList;","import React, { Component, useImperativeHandle } from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Favorite from '@material-ui/icons/Favorite';\r\nimport FavoriteBorder from '@material-ui/icons/FavoriteBorder';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Question from './Question';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport Skeleton from '@material-ui/lab/Skeleton';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nimport { Grid } from '@material-ui/core';\r\n\r\nfunction Alert(props) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\nconst useStyles = theme => ({\r\n    root: {\r\n      width: '100%',\r\n      backgroundColor: 'rgba(10,10,10,0.5)',\r\n      color: 'white',\r\n    },\r\n    questions: {\r\n        marginTop: '20px',\r\n        margin: 'auto',\r\n        maxWidth: 800,\r\n    },\r\n    timer: {\r\n        fontSize: 20\r\n    },\r\n    result: {\r\n        marginTop: '80px',\r\n        margin: 15,\r\n        textAlign: 'center',\r\n    },\r\n    hide: {\r\n        display: 'none'\r\n    },\r\n    backdrop: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        color: '#fff',\r\n    },\r\n});\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nclass Exam extends Component {   \r\n    constructor(props) {\r\n        super(props);\r\n        this.setState({});\r\n        this.state = {\r\n            exam: 'test exam',\r\n            questions: [],\r\n            time: 10,\r\n            refs: [],\r\n            handled: false,\r\n            correct: 0,\r\n            wrong: 0,\r\n            dialogOpen: false,\r\n            loading: true,\r\n            examType: 'practice',\r\n            xmRnd: 0,\r\n        };\r\n        this.cnt = 0;\r\n    }\r\n    setStateSynchronous(stateUpdate) {\r\n        return new Promise(resolve => {\r\n            this.setState(stateUpdate, () => resolve());\r\n        });  \r\n    }\r\n    componentDidMount() {\r\n        this.setState({exam: this.props.match.params.id});\r\n        fetch(\"https://questrom.herokuapp.com/exams/\"+this.props.match.params.id,{\r\n            credentials: 'include',\r\n            crossDomain: true\r\n        })\r\n        .then(res=>res.json())\r\n        .then(async (data)=>{\r\n            await this.setStateSynchronous({examType: data.type});\r\n            await this.setStateSynchronous({time: Math.floor((data.endTime - new Date().getTime())/1000)});\r\n            await this.setStateSynchronous({xmEnd: data.xm_end});\r\n            this.setState({questions: data.questions},() => {\r\n                var refs=[];\r\n                for(var i=0;i<data.questions.length;i++) refs.push(React.createRef());\r\n                console.log(this.state.questions);\r\n\r\n                this.setState({refs: refs});\r\n            });\r\n            this.state.timer=setInterval(()=>this.setState(prev=>({time: prev.time-1}),()=>{\r\n                if(this.state.time<=0) {\r\n                    clearInterval(this.state.timer);\r\n                    this.handle();\r\n                }\r\n            }),1000);\r\n        });\r\n    }\r\n    handle() {\r\n        this.setState({dialogOpen: false});\r\n        if(this.cnt !== this.state.questions.length ) return ;\r\n        if(this.state.handled)  {\r\n            console.log('already handled');\r\n            return;\r\n        }\r\n        console.log('handle submit');\r\n        // if live exam, don't check until xm ends.\r\n        if(this.state.examType ==='live' && new Date().getTime() < this.state.xmEnd) return;\r\n        var c=0,w=0;\r\n        for(var i=0;i<this.state.refs.length;i++) {\r\n            const result=this.state.refs[i].current.chex();\r\n            console.log(i,result)\r\n            if(result===1) c++;\r\n            else if(result===2) w++;\r\n        }\r\n        // set handled = true so that it can never be called again\r\n\r\n        this.setState({handled: true});\r\n        clearInterval(this.state.timer);\r\n        this.setState({correct: c});\r\n        this.setState({wrong: w});\r\n    }\r\n    f(x) {\r\n        if(x.length===1) return '0'+x;\r\n        return x;\r\n    }\r\n    getTime() {\r\n        var now=this.state.time;\r\n        if(now<=0) now=0;\r\n        var h=Math.floor(now/3600);\r\n        now%=3600;\r\n        var m=Math.floor(now/60);\r\n        now%=60;\r\n        return this.f(h.toString())+':'+this.f(m.toString())+':'+this.f(now.toString());\r\n    }\r\n    handleClose() {\r\n        this.setState({dialogOpen: false});\r\n    }\r\n    handleOpen() {\r\n        this.setState({dialogOpen: true});\r\n    }\r\n    handleSnackbarClose() {\r\n        this.setState({snackbar: false});\r\n    }\r\n    loaded = (x) => {\r\n        //console.log('loaded',x);\r\n        this.cnt++;\r\n        if(this.cnt === this.state.questions.length) { \r\n            // all questions loaded, so hide loader\r\n            this.setState({loading: false});\r\n\r\n            // if time is over, handle checking\r\n            if(this.state.time <= 0) this.handle();\r\n        }\r\n    }\r\n    getSubmitBtn() {\r\n        if(this.state.examType === 'live') return '';\r\n        return <Button variant=\"outlined\" onClick={()=>this.handleOpen()}>Submit</Button>;\r\n    }\r\n    render() {\r\n        \r\n        return ( \r\n            <div>\r\n                <Backdrop className={this.props.classes.backdrop} open={this.state.loading}>\r\n                    <CircularProgress color=\"inherit\" />\r\n                </Backdrop>\r\n                <Dialog\r\n                    open={this.state.dialogOpen}\r\n                    \r\n                    keepMounted\r\n                    onClose={()=>this.handleClose()}\r\n                    \r\n                    fullWidth={true}\r\n                    maxWidth={'md'}\r\n                    >\r\n                    <DialogTitle id=\"alert-dialog-slide-title\">Are you sure?</DialogTitle>\r\n                    <DialogActions style={{flex:1, justifyContent: 'center'}}>\r\n                        <Button variant=\"outlined\" onClick={()=>this.handleClose()}>\r\n                            No\r\n                        </Button>\r\n                        <Button variant=\"outlined\" onClick={()=>this.handle()}>\r\n                            Yes\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n                <AppBar position=\"fixed\" className={this.props.classes.root}>\r\n                <Toolbar style={{flex: 1, justifyContent: 'space-between'}}>\r\n                    <Typography className={this.props.classes.timer}>\r\n                        {this.getTime()}\r\n                    </Typography>\r\n                    {this.getSubmitBtn()}\r\n                </Toolbar>\r\n                </AppBar>\r\n\r\n                <div className={this.props.classes.questions}>\r\n                    <Card className={this.state.handled?this.props.classes.result:this.props.classes.hide}>\r\n                        \r\n                        <CardContent>\r\n                            <Typography variant=\"h6\" component=\"h2\" className={this.props.classes.question}>\r\n                                RESULT\r\n                            </Typography>\r\n                            <Typography color=\"textSecondary\">\r\n                                CORRECT: {this.state.correct}\r\n                            </Typography>\r\n                            <Typography color=\"textSecondary\">\r\n                                WRONG: {this.state.wrong}\r\n                            </Typography>\r\n                            <Typography color=\"textSecondary\">\r\n                                MARKS: {this.state.correct - this.state.wrong * 0.25}/{this.state.questions.length}\r\n                            </Typography>\r\n                        </CardContent>                 \r\n                    </Card>\r\n                    \r\n\r\n                    <div>\r\n                    {this.state.questions.length>0 && this.state.questions.map((question,index)=> {\r\n                        return (\r\n                            <Question loaded = {this.loaded} data={question} id={index+1} key={question._id} Type={this.state.examType} ref={this.state.refs[index]} name={this.props.match.params.id}></Question>\r\n                        );\r\n                    })}\r\n                    </div>\r\n                </div>\r\n                <Snackbar open={this.state.snackbar} autoHideDuration={6000} onClose={()=>this.handleSnackbarClose()}>\r\n                <Alert severity=\"info\">Exam Started!</Alert>\r\n                </Snackbar>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default withStyles(useStyles)(Exam)","import React, { Component, useImperativeHandle } from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Favorite from '@material-ui/icons/Favorite';\r\nimport FavoriteBorder from '@material-ui/icons/FavoriteBorder';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport PriorityHighIcon from '@material-ui/icons/PriorityHigh';\r\nimport MuiAccordion from '@material-ui/core/Accordion';\r\nimport MuiAccordionSummary from '@material-ui/core/AccordionSummary';\r\nimport MuiAccordionDetails from '@material-ui/core/AccordionDetails';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport MuiFiberManualRecordIcon from '@material-ui/icons/FiberManualRecord';\r\nimport MuiFiberManualRecordOutlinedIcon from '@material-ui/icons/FiberManualRecordOutlined';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\nimport Switch from '@material-ui/core/Switch';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Fade from '@material-ui/core/Fade';\r\n\r\nconst useStyles = theme => ({\r\n    root: {\r\n        height: \"100%\",\r\n        '&:hover': {\r\n            boxShadow: '0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)',\r\n        },\r\n        paddingBottom: '10px'\r\n    },\r\n    bullet: {\r\n        display: 'inline-block',\r\n        margin: '0 2px',\r\n        transform: 'scale(0.8)',\r\n    },\r\n    title: {\r\n        fontSize: 14,\r\n        marginBottom: '25px',\r\n    },\r\n    question: {\r\n        marginBottom: '25px',\r\n    },\r\n    hide: {\r\n        display: 'none',\r\n    },\r\n    red: {\r\n        color: 'red',\r\n    },\r\n    green: {\r\n        color: '#00ff00',\r\n    },\r\n    yellow: {\r\n        color: 'yellow'\r\n    },\r\n    largeIcon: {\r\n        width: 60,\r\n        height: 60,\r\n    },\r\n});\r\n\r\nclass ExamLink extends Component {   \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            time: 0,\r\n            timer: null,\r\n            duration: 0,\r\n        };\r\n    }\r\n\r\n    getStartingTime() {\r\n        return new Date(this.props.data.start).toLocaleString();\r\n    }\r\n    getEndingTime() {\r\n        return new Date(this.props.data.end).toLocaleString();\r\n    }\r\n    take() {\r\n        window.location='/exam/'+this.props.data.name;\r\n    }\r\n    componentDidMount() {\r\n        this.setState({time: Math.floor((this.props.data.start-new Date().getTime())/1000)});\r\n        this.setState({duration: this.props.data.duration});\r\n        this.state.timer=setInterval(()=>this.setState(prev=>({time: prev.time-1}),()=>{\r\n            if(this.state.time<=0) {\r\n                clearInterval(this.state.timer);\r\n            }\r\n        }),1000);\r\n    }\r\n    f(x) {\r\n        if(x.length===1) return '0'+x;\r\n        return x;\r\n    }\r\n    getTime(x) {\r\n        var now=x;\r\n        if(now<=0) now=0;\r\n        var h=Math.floor(now/3600);\r\n        now%=3600;\r\n        var m=Math.floor(now/60);\r\n        now%=60;\r\n        return this.f(h.toString())+':'+this.f(m.toString())+':'+this.f(now.toString());\r\n    }\r\n    leaderboard() {\r\n        window.location = '/result/'+this.props.data.name+'.html';\r\n    }\r\n    render() {\r\n        \r\n        return ( \r\n            <Card className={this.props.classes.root}>\r\n                <CardContent>\r\n                    <Typography className={this.props.classes.title} color=\"textSecondary\" gutterBottom>\r\n                    {this.props.data.tags.map((tag,index) => {\r\n                            return (\r\n                                <span key={index}>\r\n                                    {tag}&nbsp;\r\n                                </span>\r\n                            );\r\n                    })}\r\n                    </Typography>\r\n                    <Typography variant=\"h6\" component=\"h2\" className={this.props.classes.question}> \r\n                    {this.props.data.name}\r\n                    </Typography>\r\n                    <b>Start:</b> {this.getStartingTime()}\r\n                    <p></p>\r\n                    <b>End:</b> {this.getEndingTime()}\r\n                    <p></p>\r\n                    <b>Duration:</b> {this.getTime(this.state.duration)}\r\n                    <p></p>\r\n                    <b>Before start:</b> {this.getTime(this.state.time)}\r\n                </CardContent>                 \r\n                <CardActions style={{flex:1, justifyContent: 'center'}}>\r\n                    <Button variant=\"outlined\" onClick={()=>this.take()}>Enter</Button>\r\n                    <Button variant=\"outlined\" onClick={()=> {\r\n                        console.log(this.state.time);\r\n                    }}>Leaderboard</Button>\r\n                </CardActions>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\nexport default withStyles(useStyles)(ExamLink)","import React, { Component } from 'react';\r\nimport ExamLink from './ExamLink';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { Grid } from '@material-ui/core';\r\nconst useStyles = theme => ({\r\n    root: {\r\n      width: '100%',\r\n      backgroundColor: 'rgba(10,10,10,0.5)',\r\n      color: 'white',\r\n    },\r\n    questions: {\r\n        marginTop: '20px',\r\n        margin: 'auto',\r\n        maxWidth: 800,\r\n    },\r\n    timer: {\r\n        fontSize: 20\r\n    },\r\n    result: {\r\n        marginTop: '80px',\r\n        margin: 15,\r\n        textAlign: 'center',\r\n    },\r\n    hide: {\r\n        display: 'none'\r\n    },\r\n    backdrop: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        color: '#fff',\r\n    },\r\n    exams: {\r\n        display: 'grid',\r\n        gridTemplateColumns: 'auto auto auto',\r\n        padding: '10px',\r\n    },\r\n    grid: {\r\n        margin: '10px',\r\n    },\r\n});\r\nclass ExamList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.setState({});\r\n    this.state = {\r\n        exams: [],\r\n        search: '',\r\n        exams_all: []\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    this.getData();\r\n  }\r\n  getData=()=>{\r\n    fetch(\"https://questrom.herokuapp.com/exams\", {\r\n      credentials: 'include',\r\n      crossDomain: true\r\n    })\r\n    .then(response=>response.json())\r\n    .then(data=>{\r\n      this.setState({exams_all: data});\r\n      this.setState({exams: data});\r\n      console.log(data);\r\n    });\r\n  }\r\n  callback(state) {\r\n    console.log(state);  \r\n  }\r\n  handleSearch(e) {\r\n    this.setState({search: e.target.value});\r\n    var ex = [];\r\n    for(var i=0;i<this.state.exams_all.length;i++) {\r\n      if(this.state.exams_all[i].name.includes(e.target.value))\r\n      ex.push(this.state.exams_all[i]);\r\n    }\r\n    this.setState({exams: ex});\r\n  }\r\n  render() {\r\n    return (\r\n      \r\n      <div className = {this.props.classes.main}>\r\n        <input type=\"text\" value={this.state.search} onChange={(e) => this.handleSearch(e)}/>\r\n        <Grid container spacing={2} className={this.props.classes.grid}>\r\n            {this.state.exams.length>0 && this.state.exams.map((exam,index) => {\r\n                return (\r\n                    \r\n                        <ExamLink data={exam} key={exam._id}></ExamLink>\r\n                    \r\n                );\r\n            })}\r\n        </Grid>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(useStyles)(ExamList)","import React, { Component, useImperativeHandle } from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = theme => ({\r\n    root: {\r\n      width: '100%',\r\n      backgroundColor: 'rgba(10,10,10,0.5)',\r\n      color: 'white',\r\n    },\r\n    questions: {\r\n        marginTop: '20px',\r\n        margin: 'auto',\r\n        maxWidth: 800,\r\n    },\r\n    timer: {\r\n        fontSize: 20\r\n    },\r\n    result: {\r\n        marginTop: '80px',\r\n        margin: 15,\r\n        textAlign: 'center',\r\n    },\r\n    hide: {\r\n        display: 'none'\r\n    },\r\n    backdrop: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        color: '#fff',\r\n    },\r\n});\r\n\r\n\r\nclass Index extends Component {   \r\n    constructor(props) {\r\n        super(props);\r\n        this.setState({});\r\n        \r\n    }\r\n\r\n    componentDidMount() {\r\n        window.location = '/exam';\r\n    }\r\n    \r\n    render() {\r\n        return ( \r\n            <div>\r\n                Redirecting...\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default withStyles(useStyles)(Index);","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route, Link, Switch } from \"react-router-dom\";\nimport { createMuiTheme, CssBaseline, ThemeProvider, useMediaQuery } from \"@material-ui/core\";\nimport { green, purple, grey } from \"@material-ui/core/colors\";\nimport QuestionList from \"./components/QuestionList\";\nimport Exam from \"./components/Exam\";\nimport ExamList from \"./components/ExamList\";\nimport Index from \"./components/Index\";\n\nimport { MuiThemeProvider, responsiveFontSizes } from \"@material-ui/core/styles\";\nimport { red } from \"@material-ui/core/colors\";\n\nconst App = () => {\n  const theme = createMuiTheme({\n      palette: {\n        mode: 'dark',\n        primary: purple,\n        secondary: grey,\n      },\n  });\n\n  var themeX = createMuiTheme({\n    palette: {\n      type: \"dark\",\n      grey: {\n        800: \"#000000\", // overrides failed\n        900: \"#121212\" // overrides success\n      }\n    }\n  });\n  themeX = responsiveFontSizes(themeX);\n\n  return (\n    <MuiThemeProvider theme={theme}>\n    <CssBaseline />\n    <Router>\n        <Switch>\n          <Route exact path='/' component={Index} />\n          <Route exact path='/question' component={QuestionList} />\n          <Route exact path='/exam' component={ExamList} />\n          <Route exact path='/exam/:id' component={Exam} />\n        </Switch>\n    </Router>\n    </MuiThemeProvider>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}